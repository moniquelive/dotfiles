" This is MoniqueLive's .vimrc file
" vim:set ts=2 sts=2 sw=2 expandtab foldenable foldmethod=marker:

set nocompatible

filetype off
filetype plugin indent on
set sessionoptions-=options

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"---------------------------------------------------------------- plugins {{{1
call plug#begin('~/.vim/plugged')

" color schemes
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'
Plug 'mhinz/vim-startify'

" tpope fandom
"Plug 'tpope/vim-obsession'
"Plug 'tpope/vim-rails'
"Plug 'tpope/vim-rake'
"Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'

" misc
Plug 'wincent/terminus'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'bronson/vim-trailing-whitespace'
Plug 'editorconfig/editorconfig-vim'

" coding
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tommcdo/vim-lion'

" Auto-complete / LSP
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" languages
Plug 'sheerun/vim-polyglot'
Plug 'thoughtbot/vim-rspec', { 'for': 'ruby' }
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'elixir-lsp/coc-elixir', {'do': 'yarn install && yarn prepack'}
Plug 'elixir-editors/vim-elixir'
Plug 'prettier/vim-prettier', { 'do': 'npm install --frozen-lockfile --production' }

" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Tree
if has('nvim')
Plug 'kyazdani42/nvim-web-devicons' " optional, for file icons
Plug 'kyazdani42/nvim-tree.lua'
endif

" Initialize plugin system
call plug#end()

if ! has("nvim")
  packadd! editexisting
endif
packadd! matchit
runtime ftplugin/man.vim

"-------------------------------------------------------- CYBERAMA - begin ---
augroup reload_vimrc " {
  au!
  au BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

augroup nasm " {
  au!
  au BufRead,BufNewFile *.asm set filetype=nasm
augroup END " }

let g:netrw_altfile = 1 " <C-6> returns to files

"-------------------------------------------------------- global defaults {{{1
set tabstop=2 softtabstop=2 shiftwidth=2 shiftround expandtab nowrap
set noswapfile hlsearch cursorline noshowmode
set number
set ignorecase smartcase
set textwidth=0 colorcolumn=+1

set laststatus=2 " Always display the statusline in all windows
set showtabline=2

set switchbuf=useopen
set showfulltag
set incsearch

set termencoding=utf-8 encoding=utf-8
set visualbell noerrorbells
set splitbelow splitright
set tags^=./.git/tags;

"set clipboard+=unnamedplus

" Autosave on focus lost
autocmd FocusLost * silent! wa
set autowriteall

" let terminal resize scale the internal windows
autocmd VimResized * :wincmd =

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" keep more context when scrolling off the end of a buffer
set scrolloff=1

" Store temporary files in a central spot
set undodir=~/tmp,/var/tmp,/tmp
set backupdir=~/tmp,/var/tmp,/tmp
set directory=~/tmp,/var/tmp,/tmp
" set backup                  " Backups are nice ...
if has('persistent_undo')
    set undofile                " So is persistent undo ...
    set undolevels=1000         " Maximum number of changes that can be undone
    set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" display incomplete commands
set showcmd

" Insert only one space when joining lines that contain sentence-terminating
" punctuation like `.`.
set nojoinspaces

" If a file is changed outside of vim, automatically reload it without asking
set autoread
set autoindent copyindent smartindent

" copied from spf13
set mouse=a mousehide
scriptencoding utf-8
set viewoptions=folds,options,cursor,unix,slash
set history=1000
set iskeyword-=.                    " '.' is an end of word designator
set iskeyword-=#                    " '#' is an end of word designator
set iskeyword-=-                    " '-' is an end of word designator

"---------------------------------------------------------------- helpers {{{1

""""""""""""""""""""""""""""""""""""""""""""""""""""" RENAME CURRENT FILE {{{2
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
" map <leader>n :call RenameFile()<cr>
command! RenameFile :call RenameFile()

""""""""""""""""""""""""""""""""""""""""""" RemoveFancyCharacters COMMAND {{{2
function! RemoveFancyCharacters()
    let typo = {}
    let typo["“"] = '"'
    let typo["”"] = '"'
    let typo["‘"] = "'"
    let typo["’"] = "'"
    let typo["–"] = '--'
    let typo["—"] = '---'
    let typo["…"] = '...'
    :exe ":%s/".join(keys(typo), '\|').'/\=typo[submatch(0)]/ge'
endfunction
command! RemoveFancyCharacters :call RemoveFancyCharacters()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" Reg COMMAND {{{2
function! Reg()
    reg
    echo "Register: "
    let char = nr2char(getchar())
    if char != "\<Esc>"
        execute "normal! \"".char."p"
    endif
    redraw
endfunction
command! -nargs=0 Reg call Reg()

""""""""""""""""""""""""""""""""""""""""" create intermediary directories {{{2
fun! <SID>AutoMakeDirectory()
  let s:directory = expand("<afile>:p:h")
  if !isdirectory(s:directory)
    call mkdir(s:directory, "p")
  endif
endfun
autocmd BufWritePre,FileWritePre * :call <SID>AutoMakeDirectory()

cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
noremap Q !!sh<CR>

"----------------------------- Use 24-bit (true-color) mode in Vim/Neovim {{{2
if exists("$TMUX") || exists("$SSH_TTY")
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
else
  let &t_ZH = "\<Esc>[3m"
  let &t_ZR = "\<Esc>[23m"
endif

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif
set background=dark " for the dark version

let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox

let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
let g:haskell_indent_disable = 1

let g:go_def_mapping_enabled = 0
let g:go_doc_balloon = 1
let g:go_doc_popup_window = 1

"---------------------------------------------------------------- airline {{{2
let g:airline_theme = 'base16_gruvbox_dark_hard'
let g:airline_powerline_fonts = 1

" Mappings to easily toggle fold levels
nnoremap z0 :setlocal foldlevel=0<cr>
nnoremap z1 :setlocal foldlevel=1<cr>
nnoremap z2 :setlocal foldlevel=2<cr>
nnoremap z3 :setlocal foldlevel=3<cr>
nnoremap z4 :setlocal foldlevel=4<cr>
nnoremap z5 :setlocal foldlevel=5<cr>

if 0 " if 0 / endif HACK
i

" Folding rules {{{2
set foldenable                  " enable folding
set foldcolumn=2                " add a fold column
set foldmethod=marker           " detect triple-{ style fold markers
set foldlevelstart=99           " start out with everything unfolded
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
                                " which commands trigger auto-unfold
function! MyFoldText()
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
    return line . ' …' . repeat(" ",fillcharcount) . foldedlinecount . ' '
endfunction
set foldtext=MyFoldText()

.
endif

" Subtle search highlights
highlight Search ctermbg=black ctermfg=yellow term=underline
highlight Comment cterm=italic

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" Alternate buffer (easier than <C-^>)
nmap <leader><leader> <c-^>

" system clipboard's copy/paste
vnoremap <leader>y "+y
nnoremap <leader>y "+y
nnoremap <leader>Y "+Y
nnoremap <leader>p "+p
nnoremap <leader>P "+P
nnoremap <D-v> "+p
nnoremap <D-V> "+P

" See http://stevelosh.com/blog/2010/09/coming-home-to-vim
nnoremap / /\v
vnoremap / /\v

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <leader>l <C-l>

" Resize splits
nnoremap <C-S-j> <c-w>+
nnoremap <C-S-k> <c-w>-
nnoremap <m-,> <c-w><
nnoremap <m-.> <c-w>>

" Open window below instead of above"
nnoremap <c-w>N :let sb=&sb<BAR>set sb<BAR>new<BAR>let &sb=sb<CR>

" Vertical equivalent of c-w-n and c-w-N"
nnoremap <c-w>v :vnew<CR>
nnoremap <c-w>V :let spr=&spr<BAR>set nospr<BAR>vnew<BAR>let &spr=spr<CR>

" Easier split resizing (shift - and shift +)
nnoremap _ <c-w>-
nnoremap + <c-w>+

" neovim, dont reinvent the wheel <3
nnoremap Y yy
set nohidden

"---------------------------------------------------------------- startify ---
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 1

if has("gui_macvim") && has("gui_running")
  "-------------------------------------------------------------- vitality ---
  let g:vitality_always_assume_iterm = 1
  xmap <D-/> <Plug>Commentary
  imap <D-/> <Plug>Commentary
  nmap <D-/> <Plug>CommentaryLine
else
  nmap <leader>/ <Plug>CommentaryLine
  xmap / <Plug>Commentary
endif

" Dont fold foldable files by default
if has("autocmd")
  augroup Unfolding
    autocmd!
    autocmd BufRead * normal zR
  augroup END
endif

" Spell checking for git commit messages
if has("autocmd")
  augroup GitCommitSpellCheck
    autocmd!
    autocmd FileType gitcommit set spell
  augroup END
endif

if has("autocmd")
  augroup RubyFrozenStringLiteral
    autocmd!
    autocmd FileType ruby iabbrev fsl # frozen_string_literal: true
  augroup END
endif

if has("autocmd")
  augroup VimHelpNavigation
    autocmd!
    autocmd FileType help nnoremap <buffer> <CR> <C-]>
    autocmd FileType help nnoremap <buffer> <BS> <C-T>
    autocmd FileType help nnoremap <buffer> o /'\l\{2,\}'<CR>
    autocmd FileType help nnoremap <buffer> O ?'\l\{2,\}'<CR>
    autocmd FileType help nnoremap <buffer> s /\|\zs\S\+\ze\|<CR>
    autocmd FileType help nnoremap <buffer> S ?\|\zs\S\+\ze\|<CR>
  augroup END
endif

if ! has('gui_running')
    set ttimeoutlen=10 lazyredraw
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

augroup RememberCursorPosition
  autocmd!
  autocmd BufRead * autocmd FileType <buffer> ++once
        \ if &ft !~# 'commit\|rebase' && line("'\"") > 1 && line("'\"") <= line("$") | exe 'normal! g`"' | endif
augroup END

"----------------------------------------------------------- editorconfig {{{1
" from https://zerokspot.com/weblog/2016/07/10/editorconfig-in-neovim/
if executable('editorconfig')
  let g:EditorConfig_exec_path = exepath('editorconfig')
  let g:EditorConfig_core_mode = 'external_command'
endif

"-------------------------------------------------------------------- FZF {{{1
" Customize fzf colors to match your color scheme
" let g:fzf_colors =
"       \ { 'fg':    ['fg', 'Normal'],
"       \ 'bg':      ['bg', 'Normal'],
"       \ 'hl':      ['fg', 'Comment'],
"       \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"       \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"       \ 'hl+':     ['fg', 'Statement'],
"       \ 'info':    ['fg', 'PreProc'],
"       \ 'border':  ['fg', 'Ignore'],
"       \ 'prompt':  ['fg', 'Conditional'],
"       \ 'pointer': ['fg', 'Exception'],
"       \ 'marker':  ['fg', 'Keyword'],
"       \ 'spinner': ['fg', 'Label'],
"       \ 'header':  ['fg', 'Comment'] }

" let g:fzf_preview_window = []
" let $FZF_DEFAULT_COMMAND='fdfind'

" Bcommits
" Blines
" Btags
" Files
nnoremap <c-p> :Files<CR>
nnoremap <leader>b    :<C-u>Buffers<cr>
nnoremap <leader>fc    :<C-u>Colors<cr>
nnoremap <leader>fcmd  :<C-u>Commands<cr>
nnoremap <leader>fgc   :<C-u>Commits<cr>
nnoremap <leader>fft   :<C-u>Filetypes<cr>
" nnoremap <leader>fgf   :<C-u>Gfiles<cr>
" nnoremap <leader>fgfd  :<C-u>Gfiles-diff<cr>
nnoremap <leader>fht   :<C-u>Helptags<cr>
nnoremap <leader>fh    :<C-u>History-command<cr>
nnoremap <leader>fhf   :<C-u>History-files<cr>
nnoremap <leader>fhs   :<C-u>History-search<cr>
nnoremap <leader>fmap  :<C-u>Maps<cr>
nnoremap <leader>fmark :<C-u>Marks<cr>
nnoremap <leader>fw    :<C-u>Windows<cr>
" nnoremap <leader>fl    :<C-u>Lines<cr>
" nnoremap <leader>floc  :<C-u>Locate<cr>
" nnoremap <leader>fs    :<C-u>Snippets<cr>
" nnoremap <leader>ft    :<C-u>Tags<cr>

"---------------------------------------------------------------- vim-lsp {{{1
augroup coc_install
  au!
  set cmdheight=2 shortmess+=c updatetime=300 signcolumn=yes

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Insert <tab> when previous text is space, refresh completion if not.
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1):
        \ <SID>check_back_space() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gT <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nmap <silent> <F3> <Plug>(coc-codeaction)
  nmap <silent> <F4> <Plug>(coc-fix-current)
  nmap <silent> <F2> <Plug>(coc-rename)
  nmap <silent> [g <Plug>(coc-diagnostic-previous)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)
  vmap <silent> <leader>f <Plug>(coc-format-selected)
  nmap <silent> <leader>f <Plug>(coc-format)
  nmap <silent> <leader>r <Plug>(coc-refactor)
  vmap <silent> <leader>r <Plug>(coc-refactor)

	xmap <silent> if <Plug>(coc-funcobj-i)
	xmap <silent> af <Plug>(coc-funcobj-a)
	xmap <silent> ic <Plug>(coc-classobj-i)
	xmap <silent> ac <Plug>(coc-classobj-a)
	omap <silent> if <Plug>(coc-funcobj-i)
	omap <silent> af <Plug>(coc-funcobj-a)
	omap <silent> ic <Plug>(coc-classobj-i)
	omap <silent> ac <Plug>(coc-classobj-a)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  au! CursorHold * silent call CocActionAsync('highlight')

  autocmd FileType elixir silent call coc#config('codeLens', {'enable': v:false})
augroup END

"------------------------------------------------------------ Tree plugin {{{1
if has("nvim")
lua <<EOF
  require("nvim-tree").setup({
  hijack_netrw = false,
  respect_buf_cwd = true
  })
EOF
nnoremap <silent> <tab> :NvimTreeToggle<cr>
endif
